; Script for Joseph Weizenbaum's ELIZA to decide if a string
; contains an equal number of A and B characters.

(ELIZA CAN DECIDE IF A STRING CONTAINS AN EQUAL NUMBER
 OF THE LETTERS A AND B.
 TYPE THE WORD EQUAL FOLLOWED BY A STRING OF A AND B LETTERS,
 WITH SPACES BETWEEN EACH LETTER. ELIZA WILL RESPOND YES IF
 THERE ARE THE SAME NUMBER OF A LETTERS AS THERE ARE OF B
 LETTERS, OTHERWISE ELIZA SAYS NO.
 EG. TYPE EQUAL A A B B AND ELIZA WILL RESPOND YES.)

(EQUAL
    ((EQUAL) ; no As or Bs
        (=QACCEPT)) 
    ((EQUAL A 0)
        (PRE (_ _ * A * 3 _ _) (=Q0)))
    ((EQUAL B 0)
        (PRE (_ _ * B * 3 _ _) (=Q0)))
    ((0)
        (YOU MUST START WITH THE WORD EQUAL
         AND FOLLOW THAT WITH ANY COMBINATION OF THE LETTERS
         A AND B WITH SPACES BETWEEN EACH LETTER.)))

; The read head is positioned at the symbol between the two asterisks.
; Although the asterisks are written to the tape, they are treated as
; not part of the tape contents.

; (Each state begins by extending the "tape" to the left and right,
; if necessary, by appending a "blank" (_). This makes the tape
; effectively infinite.)

                                                      ; state   read    write   move    state'
(Q0
    ((* 0) (PRE (_ * 2) (=Q0)))
    ((0 *) (PRE (1 * _) (=Q0)))
    ((0 1 * A * 1 0) (PRE (1   2   X * 6 * 7) (=Q1))) ; Q0      A       X       right   Q1
    ((0 1 * B * 1 0) (PRE (1   2   X * 6 * 7) (=Q2))) ; Q0      B       X       right   Q2
    ((0 1 * X * 1 0) (PRE (1   2   X * 6 * 7) (=Q0))) ; Q0      X       X       right   Q0
    ((0 1 * _ * 1 0) (=QACCEPT)))                     ; Q0      _                       QACCEPT

(Q1
    ((* 0) (PRE (_ * 2) (=Q1)))
    ((0 *) (PRE (1 * _) (=Q1)))
    ((0 1 * A * 1 0) (PRE (1   2   A * 6 * 7) (=Q1))) ; Q1      A       A       right   Q1
    ((0 1 * B * 1 0) (PRE (1 * 2 * X   6   7) (=Q3))) ; Q1      B       X       left    Q3
    ((0 1 * X * 1 0) (PRE (1   2   X * 6 * 7) (=Q1))) ; Q1      X       X       right   Q1
    ((0 1 * _ * 1 0) (=QREJECT)))                     ; Q1      _                       QREJECT

(Q2
    ((* 0) (PRE (* _ 2) (=Q2)))
    ((0 *) (PRE (1 * _) (=Q2)))
    ((0 1 * A * 1 0) (PRE (1 * 2 * X   6   7) (=Q3))) ; Q2      A       X       left    Q3
    ((0 1 * B * 1 0) (PRE (1   2   B * 6 * 7) (=Q2))) ; Q2      B       B       right   Q2
    ((0 1 * X * 1 0) (PRE (1   2   X * 6 * 7) (=Q2))) ; Q2      X       X       right   Q2
    ((0 1 * _ * 1 0) (=QREJECT)))                     ; Q2      _                       QREJECT

(Q3
    ((* 0) (PRE (_ * 2) (=Q3)))
    ((0 *) (PRE (1 * _) (=Q3)))
    ((0 1 * A * 1 0) (PRE (1 * 2 * A   6   7) (=Q3))) ; Q3      A       A       left    Q3
    ((0 1 * B * 1 0) (PRE (1 * 2 * B   6   7) (=Q3))) ; Q3      B       B       left    Q3
    ((0 1 * X * 1 0) (PRE (1 * 2 * X   6   7) (=Q3))) ; Q3      X       X       left    Q3
    ((0 1 * _ * 1 0) (PRE (1   2   _ * 6 * 7) (=Q0)))); Q3      _       _       right   Q0

(QACCEPT
    ((0)
        (YES)))
(QREJECT
    ((0)
        (NO)))

(NONE
    ((0)
        (TRY TYPING EQUAL B A B A)))

(TURING
    ((0)
        (MACHINE)))

(MEMORY TURING
    (0 = TURING MACHINE)
    (0 = TURING MACHINE)
    (0 = TURING MACHINE)
    (0 = TURING MACHINE))
